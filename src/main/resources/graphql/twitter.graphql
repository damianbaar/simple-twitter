scalar DateTime

type Tweet {
  id: ID!
  message: String!
  authorId: String!
  creationDate: DateTime
}

type FollowerEdge {
  id: ID!
  userId: String!
  followUserId: String!
} 

type Author {
  id: ID!
  name: String!
  tweets: [Tweet]!
  followers: [Author]
}
 
type Query {
  tweets(count: Int, offset: Int): [Tweet]!
  tweetsByAuthor(authorId: String, count: Int, offset: Int): [Tweet]
  authors: [Author]
}

type Mutation {
  addTweet(input: String!, author: String!) : Tweet!
  addAuthor(name: String!) : Author!
  addFollower(userId: String!, followUserId: String!) : FollowerEdge!
}